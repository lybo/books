{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userInfo","users","books","request","method","uri","this","setState","JSON","parse","_this2","react_default","a","createElement","className","onSubmit","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee2","e","wrap","_context2","prev","next","preventDefault","find","user","username","value","abrupt","sent","stop","_x","apply","arguments","id","type","name","defaultValue","placeholder","ref","onClick","map","book","key","link","src","img","alt","title","target","rel","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ZA6IeA,qNAvIbC,MAAQ,CACNC,UAAU,EACVC,MAAO,GACPC,MAAO,sNAIaC,IAAQ,CAC1BC,OAAQ,MACRC,IAAK,8CAFDJ,SAINK,KAAKC,SAAS,CACZN,MAAOO,KAAKC,MAAMR,wIAIb,IAAAS,EAAAJ,KACP,OACEK,EAAAC,EAAAC,cAAA,OACEC,UAAU,QAERR,KAAKP,MAAMC,UACXW,EAAAC,EAAAC,cAAA,OACEC,UAAU,SAEVH,EAAAC,EAAAC,cAAA,MACEC,UAAU,gBADZ,SAKAH,EAAAC,EAAAC,cAAA,QACEC,UAAU,cACVC,SAAQ,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAP,EAAAQ,KAAE,SAAAC,EAAOC,GAAP,IAAAtB,EAAAE,EAAA,OAAAiB,EAAAP,EAAAW,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACRJ,EAAEK,kBACI3B,EAAWU,EAAKX,MAAME,MAAM2B,KAAK,SAAAC,GAAI,OAAIA,EAAKC,WAAapB,EAAKoB,SAASC,UAE7D/B,EAASK,IAJnB,CAAAmB,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,wBAAAR,EAAAE,KAAA,EAQYvB,IAAQ,CAC1BC,OAAQ,MACRC,IAAKL,EAASK,MAVR,OAQFH,EAREsB,EAAAS,KAYRvB,EAAKH,SAAS,CACZP,WACAE,MAAOM,KAAKC,MAAMP,KAdZ,wBAAAsB,EAAAU,SAAAb,EAAAf,SAAF,gBAAA6B,GAAA,OAAAnB,EAAAoB,MAAA9B,KAAA+B,YAAA,IAkBR1B,EAAAC,EAAAC,cAAA,SACEyB,GAAG,WACHC,KAAK,OACLC,KAAK,WACLC,aAAa,GACb3B,UAAU,eACV4B,YAAY,WACZC,IAAK,SAACb,GAAD,OAAcpB,EAAKoB,SAAWA,KAErCnB,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBADZ,gBAQLR,KAAKP,MAAMC,UACVW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,aAEVH,EAAAC,EAAAC,cAAA,OACEC,UAAU,sBADZ,OAGOR,KAAKP,MAAMC,SAAS8B,UAE3BnB,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACV8B,QAAS,WACPlC,EAAKH,SAAS,CACZP,UAAU,EACVE,MAAO,OALb,sBAaFS,EAAAC,EAAAC,cAAA,OACEC,UAAU,SAETR,KAAKP,MAAMG,MAAM2C,IAAI,SAAAC,GAAI,OACxBnC,EAAAC,EAAAC,cAAA,OACEkC,IAAKD,EAAKE,KACVlC,UAAU,QAEVH,EAAAC,EAAAC,cAAA,OACEC,UAAU,wBAEVH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVmC,IAAKH,EAAKI,IACVC,IAAKL,EAAKM,SAGdzC,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBAEVH,EAAAC,EAAAC,cAAA,MACEC,UAAU,eAETgC,EAAKM,OAERzC,EAAAC,EAAAC,cAAA,KACEC,UAAU,aACVuC,OAAO,SACPC,IAAI,sBACJC,KAAMT,EAAKE,MAJb,uBApHFQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f102d2de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport request from 'request-promise-native';\nimport './App.css';\n// import bg from './bg.jpg';\n\nclass App extends Component {\n  state = {\n    userInfo: false,\n    users: [],\n    books: [],\n  }\n\n  async componentWillMount() {\n    const users = await request({\n      method: 'GET',\n      uri: 'https://api.myjson.com/bins/18wtzc',\n    });\n    this.setState({\n      users: JSON.parse(users),\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n      >\n        {!this.state.userInfo && (\n          <div\n            className=\"login\"\n          >\n            <h2\n              className=\"login__title\"\n            >\n              Books\n            </h2>\n            <form\n              className=\"login__form\"\n              onSubmit={async (e) => {\n                e.preventDefault();\n                const userInfo = this.state.users.find(user => user.username === this.username.value);\n\n                if (!userInfo || !userInfo.uri) {\n                  return;\n                }\n\n                const books = await request({\n                  method: 'GET',\n                  uri: userInfo.uri,\n                });\n                this.setState({\n                  userInfo,\n                  books: JSON.parse(books),\n                });\n              }}\n            >\n              <input\n                id=\"username\"\n                type=\"text\"\n                name=\"username\"\n                defaultValue=\"\"\n                className=\"login__input\"\n                placeholder=\"Username\"\n                ref={(username) => this.username = username}\n              />\n              <button\n                className=\"login__button\"\n              >\n                Load books\n              </button>\n            </form>\n          </div>\n        )}\n        {this.state.userInfo && (\n          <div>\n            <div\n              className=\"user-info\"\n            >\n              <div\n                className=\"user-info__welcome\"\n              >\n                hi, {this.state.userInfo.username}\n              </div>\n              <button\n                className=\"user-info__logout\"\n                onClick={() => {\n                  this.setState({\n                    userInfo: false,\n                    books: [],\n                  });\n                }}\n              >\n                load another user\n              </button>\n            </div>\n\n            <div\n              className=\"books\"\n            >\n              {this.state.books.map(book => (\n                <div\n                  key={book.link}\n                  className=\"book\"\n                >\n                  <div\n                    className=\"book_image-container\"\n                  >\n                    <img\n                      className=\"book__image\"\n                      src={book.img}\n                      alt={book.title}\n                    />\n                  </div>\n                  <div\n                    className=\"book__content\"\n                  >\n                    <h3\n                      className=\"book__title\"\n                    >\n                      {book.title}\n                    </h3>\n                    <a\n                      className=\"book__link\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href={book.link}\n                    >\n                      visit\n                    </a>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}